{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\\\uC815\\uBBFC\\uADDC\\\\Desktop\\\\git\\\\front_end_study\\\\14_book\\\\fc-fe-final-part2-forked (1)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\\\uC815\\uBBFC\\uADDC\\\\Desktop\\\\git\\\\front_end_study\\\\14_book\\\\fc-fe-final-part2-forked (1)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _slicedToArray from \"C:\\\\Users\\\\\\uC815\\uBBFC\\uADDC\\\\Desktop\\\\git\\\\front_end_study\\\\14_book\\\\fc-fe-final-part2-forked (1)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\\\uC815\\uBBFC\\uADDC\\\\Desktop\\\\git\\\\front_end_study\\\\14_book\\\\fc-fe-final-part2-forked (1)\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"C:\\\\Users\\\\\\uC815\\uBBFC\\uADDC\\\\Desktop\\\\git\\\\front_end_study\\\\14_book\\\\fc-fe-final-part2-forked (1)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { bookSearch } from \"./api/Api\";\nimport Book from \"./Book\";\nimport \"./css/App.css\";\n/**\r\n * Week Final - 최종 평가 (part. 2)\r\n * 범위: Week 1 ~ Week 12\r\n * 총점: 40\r\n *\r\n * 아래 과정을 \"----잘----\"읽고 풀이해주세요.\r\n *\r\n * 1. 보고 계신 sandbox를 fork 해주세요.\r\n * 2. 아래 링크를 방문하여 구현 결과 영상을 확인해주세요.\r\n * https://drive.google.com/file/d/1-rGlhKIGd3kIHSn1zZP6CKNVmbI_s2Xp/view?usp=sharing\r\n * \r\n * 3. 카카오 도서 검색 api 사용 방법:\r\n * 3.1. https://developers.kakao.com 방문\r\n * 3.2. 우측 상단 \"로그인\" 버튼 클릭 후 카카오 로그인\r\n * 3.3. 3.2. \"로그인\" 버튼 좌측의 \"내 애플리케이션\" 버튼 클릭\r\n * 3.4. \"애플리케이션 추가하기\" 클릭 후 앱 등록 (앱이름, 사업자명은 원하시는대로 작성하시면됩니다.)\r\n * 3.5. 3.4.에서 생성한 앱으로 이동 -> 앱 키 목록 중 \"JavaScript 키\" 확인 (api 사용시 필요)\r\n * 3.6. https://developers.kakao.com/docs/latest/ko/daum-search/dev-guide#search-book 으로 이동\r\n * 3.7. 책 검색 api 사용 가이드를 \"----잘----\" 읽고 과제 풀이에 사용하시면됩니다.\r\n * 3.8. (주의) Request 파라미터 중 size, target은 각각 10, 'title'을 사용해주세요.\r\n * \r\n * 4. 페이지 디자인은 원하시는대로 진행하시면됩니다. 단, 최소한의 성의는 보여주세요. (구현 결과 영상만큼이라도..)\r\n \r\n * 5. 요구 사항:\r\n * 5.1. 최초 실행 시 \"검색어를 입력해주세요.\" 텍스트를 표시한다.\r\n * 5.2. 검색어 입력 후 검색 버튼을 누르면 검색 결과 노출 전까지 로딩 중이란 것을 표시한다.\r\n * 5.3. 검색 결과에는 각 도서의 썸네일(thumbnail), 제목(title), 작가(authors), 출판사(publisher), 출판 날짜(datetime), 가격(sale_price 혹은 price)을 표시한다.\r\n * 5.4. 썸네일이 제공되지 않을 경우, no-picture.jpg를 사용한다.\r\n * 5.5. status가 '정상판매'일 경우 sale_price를 사용한다. 만약 sale_price가 유효하지 않은 값이면(ex. 음수), price를 대신 사용한다.\r\n * 5.6. 각 도서 영역을 클릭하면 해당 도서의 상세 페이지(url)로 이동한다. (새 탭으로 이동)\r\n * 5.7. 검색 결과는 10개씩 노출한다. 만약 검색 결과가 11개 이상이면, 스크롤이 최하단에 위치했을 때 10개를 추가 노출한다. 또한, 목록이 추가되기 전 로딩 중이란 것을 표시한다.\r\n * \r\n * 예를 들어, 검색 결과가 총 23개 일 때, 최초 10개 노출 -> 스크롤 (로딩 중 표시) ->\r\n * 10개 추가 노출 (20개 노출) -> 스크롤 (로딩 중 표시)-> 3개 추가 노출 (23개 노출)\r\n * \r\n * 5.8. 모든 결과를 표시한 경우 스크롤이 최하단에 위치했을 때 아무 변화도 일어나지 않는다.\r\n * 5.9. 검색 결과가 존재하지 않을 경우 검색 결과가 없다는 것을 표시한다.\r\n * 5.10. 에러 발생 시 \"에러 발생\" 텍스트를 페이지에 표시한다.\r\n * \r\n * 6. 풀이를 마쳤다면 fork한 sandbox에 멘토를 초대해주세요.\r\n * 7. sandbox의 url을 Week 13 - 최종 평가 과제에 제출해주세요.\r\n *\r\n * 채점 기준:\r\n * 검색 요청 (10점)\r\n * 결과 표시 (10점)\r\n * 인피니트 스크롤 구현 (10점)\r\n * 디자인 (10점)\r\n *\r\n * Tip:\r\n * 도서 검색 api 사용 가이드를 잘 읽어주세요. (제발요)\r\n * 필요한 라이브러리는 직접 설치하여 사용해주세요.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var _this = this;\n\n  // do something\n  var initialbooks = [{\n    authors: [],\n    thumbnail: \"\",\n    title: \"\",\n    publisher: \"\",\n    datetime: \"\",\n    price: \"\",\n    sale_price: \"\",\n    status: \"\",\n    url: \"\"\n  }];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      query = _useState4[0],\n      setQuery = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      inputvalue = _useState6[0],\n      setinputValue = _useState6[1];\n\n  var _useState7 = useState(initialbooks),\n      _useState8 = _slicedToArray(_useState7, 2),\n      books = _useState8[0],\n      setBooks = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      fetching = _useState10[0],\n      setFetching = _useState10[1];\n\n  var _useState11 = useState(1),\n      _useState12 = _slicedToArray(_useState11, 2),\n      page = _useState12[0],\n      setPage = _useState12[1];\n\n  var pageNumber = useRef(1); // useRef 선언\n\n  useEffect(function () {\n    if (query.length > 0) {\n      bookSearchHttpHandler(query);\n    }\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return function () {\n      // scroll event listener 해제\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [query]);\n\n  var bookSearchHttpHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n      var params, _yield$bookSearch$the, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // paramter 설정\n              setLoading(true);\n              params = {\n                query: query,\n                sort: \"accuracy\",\n                page: 1,\n                size: 10,\n                target: \"title\"\n              };\n              _context.next = 4;\n              return bookSearch(params).then().catch(function (e) {\n                console.log(\"error\");\n              });\n\n            case 4:\n              _yield$bookSearch$the = _context.sent;\n              data = _yield$bookSearch$the.data;\n              // api 호출\n              setBooks(data.documents);\n              setLoading(false);\n              return _context.abrupt(\"return\", data.documents);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function bookSearchHttpHandler(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var fetchbooks = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(query, page) {\n      var newparams, _yield$bookSearch$the2, data, fetchedData;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // 추가 데이터를 로드하는 상태로 전환\n              setFetching(true);\n              newparams = {\n                query: query,\n                sort: \"accuracy\",\n                page: page,\n                size: 10,\n                target: \"title\"\n              };\n              _context2.next = 4;\n              return bookSearch(newparams).then().catch(function (e) {\n                console.log(\"error\");\n              });\n\n            case 4:\n              _yield$bookSearch$the2 = _context2.sent;\n              data = _yield$bookSearch$the2.data;\n              // api 호출\n              // const fetchedData = data.documents; // 피드 데이터 부분\n              // // 기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만들고 state에 저장한다.\n              // const newbooks = [...books, ...fetchedData];\n              // setBooks(newbooks);\n              fetchedData = data.documents;\n              setBooks(function (prev) {\n                return [].concat(_toConsumableArray(prev), _toConsumableArray(fetchedData));\n              });\n              console.log(newbooks);\n              console.log(books);\n              setFetching(false);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function fetchbooks(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleScroll = function handleScroll() {\n    var scrollHeight = document.documentElement.scrollHeight;\n    var scrollTop = document.documentElement.scrollTop;\n    var clientHeight = document.documentElement.clientHeight;\n\n    if (scrollTop + clientHeight >= scrollHeight && fetching === false) {\n      // 페이지 끝\n      pageNumber.current += 1;\n      fetchbooks(query, pageNumber.current);\n    }\n  };\n\n  var onSubmit = function onSubmit(e) {\n    //제출\n    e.preventDefault();\n    setQuery(inputvalue);\n  };\n\n  var onChange = function onChange(e) {\n    //변화감지시 값 변화\n    setinputValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        onClick: onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: loading ? \"로딩중\" : books[0].title === \"\" ? \"검색어를 입력해주세요.\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"books\",\n      children: books.map(function (book, index) {\n        return /*#__PURE__*/_jsxDEV(Book, {\n          book: books[index]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"J/npFqiHYBfvSaed9gSgsOvz6Ug=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/정민규/Desktop/git/front_end_study/14_book/fc-fe-final-part2-forked (1)/src/App.js"],"names":["React","useEffect","useState","bookSearch","Book","App","initialbooks","authors","thumbnail","title","publisher","datetime","price","sale_price","status","url","loading","setLoading","query","setQuery","inputvalue","setinputValue","books","setBooks","fetching","setFetching","page","setPage","pageNumber","useRef","length","bookSearchHttpHandler","window","addEventListener","handleScroll","removeEventListener","params","sort","size","target","then","catch","e","console","log","data","documents","fetchbooks","newparams","fetchedData","prev","newbooks","scrollHeight","document","documentElement","scrollTop","clientHeight","current","onSubmit","preventDefault","onChange","value","map","book","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { bookSearch } from \"./api/Api\";\r\nimport Book from \"./Book\";\r\nimport \"./css/App.css\";\r\n\r\n/**\r\n * Week Final - 최종 평가 (part. 2)\r\n * 범위: Week 1 ~ Week 12\r\n * 총점: 40\r\n *\r\n * 아래 과정을 \"----잘----\"읽고 풀이해주세요.\r\n *\r\n * 1. 보고 계신 sandbox를 fork 해주세요.\r\n * 2. 아래 링크를 방문하여 구현 결과 영상을 확인해주세요.\r\n * https://drive.google.com/file/d/1-rGlhKIGd3kIHSn1zZP6CKNVmbI_s2Xp/view?usp=sharing\r\n * \r\n * 3. 카카오 도서 검색 api 사용 방법:\r\n * 3.1. https://developers.kakao.com 방문\r\n * 3.2. 우측 상단 \"로그인\" 버튼 클릭 후 카카오 로그인\r\n * 3.3. 3.2. \"로그인\" 버튼 좌측의 \"내 애플리케이션\" 버튼 클릭\r\n * 3.4. \"애플리케이션 추가하기\" 클릭 후 앱 등록 (앱이름, 사업자명은 원하시는대로 작성하시면됩니다.)\r\n * 3.5. 3.4.에서 생성한 앱으로 이동 -> 앱 키 목록 중 \"JavaScript 키\" 확인 (api 사용시 필요)\r\n * 3.6. https://developers.kakao.com/docs/latest/ko/daum-search/dev-guide#search-book 으로 이동\r\n * 3.7. 책 검색 api 사용 가이드를 \"----잘----\" 읽고 과제 풀이에 사용하시면됩니다.\r\n * 3.8. (주의) Request 파라미터 중 size, target은 각각 10, 'title'을 사용해주세요.\r\n * \r\n * 4. 페이지 디자인은 원하시는대로 진행하시면됩니다. 단, 최소한의 성의는 보여주세요. (구현 결과 영상만큼이라도..)\r\n \r\n * 5. 요구 사항:\r\n * 5.1. 최초 실행 시 \"검색어를 입력해주세요.\" 텍스트를 표시한다.\r\n * 5.2. 검색어 입력 후 검색 버튼을 누르면 검색 결과 노출 전까지 로딩 중이란 것을 표시한다.\r\n * 5.3. 검색 결과에는 각 도서의 썸네일(thumbnail), 제목(title), 작가(authors), 출판사(publisher), 출판 날짜(datetime), 가격(sale_price 혹은 price)을 표시한다.\r\n * 5.4. 썸네일이 제공되지 않을 경우, no-picture.jpg를 사용한다.\r\n * 5.5. status가 '정상판매'일 경우 sale_price를 사용한다. 만약 sale_price가 유효하지 않은 값이면(ex. 음수), price를 대신 사용한다.\r\n * 5.6. 각 도서 영역을 클릭하면 해당 도서의 상세 페이지(url)로 이동한다. (새 탭으로 이동)\r\n * 5.7. 검색 결과는 10개씩 노출한다. 만약 검색 결과가 11개 이상이면, 스크롤이 최하단에 위치했을 때 10개를 추가 노출한다. 또한, 목록이 추가되기 전 로딩 중이란 것을 표시한다.\r\n * \r\n * 예를 들어, 검색 결과가 총 23개 일 때, 최초 10개 노출 -> 스크롤 (로딩 중 표시) ->\r\n * 10개 추가 노출 (20개 노출) -> 스크롤 (로딩 중 표시)-> 3개 추가 노출 (23개 노출)\r\n * \r\n * 5.8. 모든 결과를 표시한 경우 스크롤이 최하단에 위치했을 때 아무 변화도 일어나지 않는다.\r\n * 5.9. 검색 결과가 존재하지 않을 경우 검색 결과가 없다는 것을 표시한다.\r\n * 5.10. 에러 발생 시 \"에러 발생\" 텍스트를 페이지에 표시한다.\r\n * \r\n * 6. 풀이를 마쳤다면 fork한 sandbox에 멘토를 초대해주세요.\r\n * 7. sandbox의 url을 Week 13 - 최종 평가 과제에 제출해주세요.\r\n *\r\n * 채점 기준:\r\n * 검색 요청 (10점)\r\n * 결과 표시 (10점)\r\n * 인피니트 스크롤 구현 (10점)\r\n * 디자인 (10점)\r\n *\r\n * Tip:\r\n * 도서 검색 api 사용 가이드를 잘 읽어주세요. (제발요)\r\n * 필요한 라이브러리는 직접 설치하여 사용해주세요.\r\n */\r\n\r\nfunction App() {\r\n  // do something\r\n  const initialbooks = [\r\n    {\r\n      authors: [],\r\n      thumbnail: \"\",\r\n      title: \"\",\r\n      publisher: \"\",\r\n      datetime: \"\",\r\n      price: \"\",\r\n      sale_price: \"\",\r\n      status: \"\",\r\n      url: \"\",\r\n    },\r\n  ];\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [inputvalue, setinputValue] = useState(\"\");\r\n  const [books, setBooks] = useState(initialbooks);\r\n  const [fetching, setFetching] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n\r\n \r\n\r\n  const pageNumber = useRef(1); // useRef 선언\r\n\r\n  useEffect(() => {\r\n    if (query.length > 0) {\r\n      bookSearchHttpHandler(query);\r\n    }\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => {\r\n      // scroll event listener 해제\r\n      window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, [query]);\r\n\r\n  const bookSearchHttpHandler = async (query) => {\r\n    // paramter 설정\r\n    setLoading(true);\r\n    const params = {\r\n      query: query,\r\n      sort: \"accuracy\",\r\n      page: 1,\r\n      size: 10,\r\n      target: \"title\",\r\n    };\r\n    const { data } = await bookSearch(params)\r\n      .then()\r\n      .catch((e) => {\r\n        console.log(\"error\");\r\n      }); // api 호출\r\n    setBooks(data.documents);\r\n    setLoading(false);\r\n\r\n    return data.documents;\r\n  };\r\n\r\n  const fetchbooks = async (query, page) => {\r\n    // 추가 데이터를 로드하는 상태로 전환\r\n    setFetching(true);\r\n    const newparams = {\r\n      query: query,\r\n      sort: \"accuracy\",\r\n      page: page,\r\n      size: 10,\r\n      target: \"title\",\r\n    };\r\n    const { data } = await bookSearch(newparams)\r\n      .then()\r\n      .catch((e) => {\r\n        console.log(\"error\");\r\n      }); // api 호출\r\n\r\n    // const fetchedData = data.documents; // 피드 데이터 부분\r\n    // // 기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만들고 state에 저장한다.\r\n    // const newbooks = [...books, ...fetchedData];\r\n    // setBooks(newbooks);\r\n\r\n    const fetchedData = data.documents;\r\n    setBooks((prev) => [...prev, ...fetchedData]);\r\n\r\n    console.log(newbooks);\r\n    console.log(books);\r\n\r\n    setFetching(false);\r\n  };\r\n\r\n  const handleScroll = () => {\r\n    const scrollHeight = document.documentElement.scrollHeight;\r\n    const scrollTop = document.documentElement.scrollTop;\r\n    const clientHeight = document.documentElement.clientHeight;\r\n    if (scrollTop + clientHeight >= scrollHeight && fetching === false) {\r\n      // 페이지 끝\r\n      pageNumber.current += 1;\r\n      fetchbooks(query, pageNumber.current);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    //제출\r\n    e.preventDefault();\r\n    setQuery(inputvalue);\r\n  };\r\n  const onChange = (e) => {\r\n    //변화감지시 값 변화\r\n    setinputValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"container\">\r\n        <input type=\"text\" onChange={onChange} />\r\n        <input type=\"submit\" onClick={onSubmit} />\r\n      </form>\r\n      <div>\r\n        {loading\r\n          ? \"로딩중\"\r\n          : books[0].title === \"\"\r\n          ? \"검색어를 입력해주세요.\"\r\n          : \"\"}\r\n      </div>\r\n      <div className=\"books\">\r\n        {books.map((book, index) => (\r\n          <Book book={books[index]} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}